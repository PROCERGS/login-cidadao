<?php
/**
 * This file is part of the login-cidadao project or it's bundles.
 *
 * (c) Guilherme Donato <guilhermednt on github>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace LoginCidadao\PhoneVerificationBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use libphonenumber\PhoneNumber;
use LoginCidadao\CoreBundle\Entity\Person;
use Misd\PhoneNumberBundle\Doctrine\DBAL\Types\PhoneNumberType;

/**
 * PhoneVerificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @codeCoverageIgnore
 */
class PhoneVerificationRepository extends EntityRepository
{
    public function countBadges()
    {
        try {
            return $this->createQueryBuilder('ph')
                ->select('COUNT(p)')
                ->innerJoin(Person::class, 'p', 'WITH', 'ph.person = p')
                ->andWhere('ph.verifiedAt IS NOT NULL')
                ->getQuery()->getSingleScalarResult();
        } catch (NonUniqueResultException $e) {
            throw new \RuntimeException('Could not count how many people has a verified phone number', 0, $e);
        }
    }

    public function countVerified(PhoneNumber $phoneNumber)
    {
        try {
            return $this->createQueryBuilder('v')
                ->select('COUNT(p)')
                ->innerJoin(Person::class, 'p', 'WITH', 'v.person = p')
                ->where('v.phone = :phone')
                ->andWhere('v.phone = p.mobile')
                ->andWhere('v.verifiedAt IS NOT NULL')
                ->setParameter('phone', $phoneNumber, PhoneNumberType::NAME)
                ->getQuery()
                ->getSingleScalarResult();
        } catch (NonUniqueResultException $e) {
            throw new \RuntimeException('Could not count how many people uses the same verified phone number', 0, $e);
        }
    }
}
